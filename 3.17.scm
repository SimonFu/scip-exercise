(define (count-pairs x)
    (let ((counted-pairs '()))
        (define (has-counted x)
            (define (iter counted)
                (if (null? counted)
                    false
                    (or    (eq? (car counted) x)
                            (iter (cdr counted)))))
            (iter counted-pairs))
        (define (iter x)
            (cond   ((not (pair? x)) 0)
                    ((has-counted x) 0)
                    (else (begin    (set! counted-pairs (cons x counted-pairs))
                                    (+  (iter (car x))
                                        (iter (cdr x))
                                        1)))))
        (iter x)))
(define x (list 'a 'b))
(define z1 (cons x x))
(count-pairs z1)