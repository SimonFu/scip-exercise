(define (make-queue)
    (let (  (front-ptr '())
            (rear-ptr '()))
        (define (empty?)
            (null? front-ptr))
        (define (front-queue)
            (if (empty?)
                (error "FRONT called with an empty queue")
                (car front-ptr)))
        (define (insert-queue! item)
            (let ((new-pair (cons item '())))
                (if (empty?)
                    (set! front-ptr new-pair)
                    (set-cdr! rear-ptr new-pair))
                (set! rear-ptr new-pair)))
        (define (delete-queue!)
            (if (empty?)
                (error "DELETE! called with an empty queue")
                (set! front-ptr (cdr front-ptr))))
        (define (dispatch m)
            (cond   ((eq? m 'empty?) empty?)
                    ((eq? m 'front-queue) front-queue)
                    ((eq? m 'insert-queue!) insert-queue!)
                    ((eq? m 'delete-queue!) delete-queue!)))
        dispatch))

(define q (make-queue))
((q 'insert-queue!) 'a)
((q 'insert-queue!) 'b)
((q 'insert-queue!) 'c)
((q 'front-queue))
((q 'delete-queue!))
((q 'front-queue))
((q 'delete-queue!))
((q 'front-queue))
((q 'delete-queue!))
((q 'front-queue))
