(define (install-deriv-sun)
    (define (make-sum a1 a2) 
        (cond   ((=number? a1 0) a2)
                ((=number? a2 0) a1)
                ((and (number? a2) (number? a1)) (+ a1 a2))
                (else (list '+ a1 a2))))
    (define (addend s) (car s))
    (define (augend s) (cadr s))
    (define (deriv exp var)
        (make-sum   (deriv (addend exp) var)
                    (deriv (augend exp) var)))

    (put 'deriv '+ deriv))

(define (install-deriv-product)
    (define (make-sum a1 a2) 
        (cond   ((=number? a1 0) a2)
                ((=number? a2 0) a1)
                ((and (number? a2) (number? a1)) (+ a1 a2))
                (else (list '+ a1 a2))))
    (define (make-product m1 m2) 
        (cond   ((or (=number? m1 0) (=number? m2 0)) 0)
                ((=number? m1 1) m2)
                ((=number? m2 1) m1)
                ((and (number? m2) (number? m1)) (* m1 m2))
                (else (list '* m1 m2))))
    (define (multiplier p) (car p))
    (define (multiplicand p) (cadr p))
    (define (deriv exp var)
        (make-sum   (make-product
                        (multiplier exp)
                        (deriv (multiplicand exp) var))
                    (make-product
                        (deriv (multiplier exp) var)
                        (multiplicand exp))))
    (put 'deriv '* deriv))

(define (install-deriv-exponentiation)
    (define (exponent e)
        (cadr e))

    (define (base e)
        (car e))
    (define (make-product m1 m2) 
        (cond   ((or (=number? m1 0) (=number? m2 0)) 0)
                ((=number? m1 1) m2)
                ((=number? m2 1) m1)
                ((and (number? m2) (number? m1)) (* m1 m2))
                (else (list '* m1 m2))))
    (define (make-exponentiation base exponent)
        (cond   ((=number? exponent 0) 1)
                ((=number? exponent 1) base)
                (else (list '** base exponent))))
    (define (deriv exp var)
        (make-product   
                    (make-product   (exponent exp)
                                    (make-exponentiation    (base exp)
                                                            (- (exponent exp) 1)))
                    (deriv (base exp) var)))
    (put 'deriv '** deriv))